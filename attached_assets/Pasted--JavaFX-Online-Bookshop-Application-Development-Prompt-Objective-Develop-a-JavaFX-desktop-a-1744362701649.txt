🛠️ JavaFX Online Bookshop Application Development Prompt
🎯 Objective:
Develop a JavaFX desktop application for an online bookshop that allows customer and administrator interactions with a catalog-driven database. Use appropriate software design patterns (GoF and non-traditional) and document their usage.
________________________________________
✅ Core Functional Requirements
📦 Stock Items (Books)
Each book should store:
•	Title
•	Author
•	Publisher
•	Price
•	Category
•	ISBN Number
•	Image (displayable in UI)
•	Optional: Description, availability status, etc.
👥 Customers
•	Register/login with account info.
•	Provide:
o	Name
o	Shipping address
o	Payment method
•	Search by:
o	Category (partial match)
o	Title (partial match)
o	Author
o	Publisher
•	Sort search results (ascending/descending) by title, author, publisher, price.
•	Add items to a shopping cart, purchase them, and update stock levels.
•	Rate items (1–5 stars) and leave reviews/comments.
•	View purchase history.
🛠️ Administrators
•	Secure login.
•	Manage books (add/edit/delete).
•	Search and sort stock same as customers.
•	View customer details and their purchase histories.
•	Simulate stock purchases (manually adjust stock levels).
________________________________________
🧱 Technical Requirements
📁 Database
Design a relational database with tables like:
•	Books
•	Users (with roles)
•	Orders
•	OrderItems
•	Reviews
Use SQLite, MySQL, or PostgreSQL as the backend.
🔐 Security
•	Role-based login (customer/admin)
•	Encrypted passwords (e.g., BCrypt)
💡 JavaFX Features
•	Scene navigation (login, shop, admin dashboard)
•	Form validation (account creation, purchases)
•	Image rendering for books
•	Dynamic tables for search/sort
•	Alert dialogs for feedback
________________________________________
🧩 Design Pattern Requirements
Use minimum 4–5 GoF patterns appropriately:
•	MVC (overall architecture)
•	Singleton (DB connection)
•	Factory (creating book/user objects)
•	Observer (cart updates)
•	Strategy (payment/discount logic)
•	Optional non-GoF: Repository, Service Locator, etc.
________________________________________
📊 Deliverables
1.	Final Codebase hosted on GitHub with proper commit history.
2.	Report 1:
o	Database schema
o	Class diagrams / UI wireframes
o	Use case flows
3.	Report 2:
o	Patterns used
o	Why and where each pattern was applied
o	Which classes participate in each pattern
________________________________________
🗓️ Deadline: April 20, 23:59
🧠 Presentation: Online demo in class following Friday
________________________________________
bookshop/
├── Main.java
├── db/
│   └── DatabaseConnection.java          // Singleton pattern
├── models/
│   ├── Book.java
│   ├── User.java
│   ├── CartItem.java
│   └── Review.java
├── controllers/
│   ├── LoginController.java
│   ├── CustomerDashboardController.java
│   ├── AdminDashboardController.java
│   └── BookDetailsController.java
├── views/
│   ├── login.fxml
│   ├── customer_dashboard.fxml
│   ├── admin_dashboard.fxml
│   └── book_details.fxml
├── utils/
│   ├── SessionManager.java              // Singleton
│   ├── ViewNavigator.java              // Scene switcher
│   └── BookFactory.java                // Factory pattern
├── services/
│   ├── AuthService.java
│   ├── BookService.java
│   ├── CartService.java
│   └── PurchaseService.java
└── resources/
    ├── styles.css
    └── images/
